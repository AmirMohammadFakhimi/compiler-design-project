Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier pid ID ';'
    7                | type_specifier pid ID '[' pnum NUM ']' ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier pid ID '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier pid ID
   16      | type_specifier pid ID '[' ']'

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | ε

   20 statement_list: statement_list statement
   21               | ε

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt
   28          | output_fun

   29 expression_stmt: expression ';'
   30                | "break" ';'
   31                | ';'

   32 selection_stmt: "if" '(' expression ')' save statement "endif"
   33               | "if" '(' expression ')' save statement "else" jpf_save statement "endif"

   34 iteration_stmt: "while" label '(' expression ')' save statement

   35 return_stmt: "return" ';'
   36            | "return" expression ';'

   37 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'

   38 case_stmts: case_stmts case_stmt
   39           | ε

   40 case_stmt: "case" pnum NUM switch_compare save ':' statement_list

   41 default_stmt: "default" ':' statement_list
   42             | ε

   43 expression: var '=' expression
   44           | simple_expression

   45 var: pid ID
   46    | pid ID '[' expression ']'

   47 simple_expression: additive_expression '<' additive_expression
   48                  | additive_expression
   49                  | additive_expression "==" additive_expression

   50 additive_expression: additive_expression '+' term
   51                    | term
   52                    | additive_expression '-' term

   53 term: term '*' factor
   54     | factor
   55     | term '/' factor

   56 factor: '(' expression ')'
   57       | var
   58       | call
   59       | pnum NUM

   60 call: pid ID '(' args ')'

   61 args: arg_list
   62     | ε

   63 arg_list: arg_list ',' expression
   64         | expression

   65 output_fun: "output" '(' expression ')' ';'

   66 pid: ε

   67 pnum: ε

   68 jpf_save: ε

   69 label: ε

   70 jp_forward: ε

   71 switch_compare: ε

   72 save: ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 32 33 34 37 56 60 65
    ')' (41) 10 32 33 34 37 56 60 65
    '*' (42) 53
    '+' (43) 50
    ',' (44) 13 63
    '-' (45) 52
    '/' (47) 55
    ':' (58) 40 41
    ';' (59) 6 7 29 30 31 35 36 65
    '<' (60) 47
    '=' (61) 43
    '[' (91) 7 16 46
    ']' (93) 7 16 46
    '{' (123) 17 37
    '}' (125) 17 37
    error (256)
    NUM (258) 7 40 59
    ID (259) 6 7 10 15 16 45 46 60
    "int" (260) 8
    "void" (261) 9 12
    "break" (262) 30
    "if" (263) 32 33
    "endif" (264) 32 33
    "else" (265) 33
    "while" (266) 34
    "return" (267) 35 36
    "switch" (268) 37
    "case" (269) 40
    "default" (270) 41
    "==" (271) 49
    "output" (272) 65


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program (34)
        on left: 1
        on right: 0
    declaration_list (35)
        on left: 2 3
        on right: 1 2
    declaration (36)
        on left: 4 5
        on right: 2 3
    var_declaration (37)
        on left: 6 7
        on right: 4 18
    type_specifier (38)
        on left: 8 9
        on right: 6 7 10 15 16
    fun_declaration (39)
        on left: 10
        on right: 5
    params (40)
        on left: 11 12
        on right: 10
    param_list (41)
        on left: 13 14
        on right: 11 13
    param (42)
        on left: 15 16
        on right: 13 14
    compound_stmt (43)
        on left: 17
        on right: 10 23
    local_declarations (44)
        on left: 18 19
        on right: 17 18
    statement_list (45)
        on left: 20 21
        on right: 17 20 40 41
    statement (46)
        on left: 22 23 24 25 26 27 28
        on right: 20 32 33 34
    expression_stmt (47)
        on left: 29 30 31
        on right: 22
    selection_stmt (48)
        on left: 32 33
        on right: 24
    iteration_stmt (49)
        on left: 34
        on right: 25
    return_stmt (50)
        on left: 35 36
        on right: 26
    switch_stmt (51)
        on left: 37
        on right: 27
    case_stmts (52)
        on left: 38 39
        on right: 37 38
    case_stmt (53)
        on left: 40
        on right: 38
    default_stmt (54)
        on left: 41 42
        on right: 37
    expression (55)
        on left: 43 44
        on right: 29 32 33 34 36 37 43 46 56 63 64 65
    var (56)
        on left: 45 46
        on right: 43 57
    simple_expression (57)
        on left: 47 48 49
        on right: 44
    additive_expression (58)
        on left: 50 51 52
        on right: 47 48 49 50 52
    term (59)
        on left: 53 54 55
        on right: 50 51 52 53 55
    factor (60)
        on left: 56 57 58 59
        on right: 53 54 55
    call (61)
        on left: 60
        on right: 58
    args (62)
        on left: 61 62
        on right: 60
    arg_list (63)
        on left: 63 64
        on right: 61 63
    output_fun (64)
        on left: 65
        on right: 28
    pid (65)
        on left: 66
        on right: 6 7 10 15 16 45 46 60
    pnum (66)
        on left: 67
        on right: 7 40 59
    jpf_save (67)
        on left: 68
        on right: 33
    label (68)
        on left: 69
        on right: 34
    jp_forward (69)
        on left: 70
        on right: 37
    switch_compare (70)
        on left: 71
        on right: 40
    save (71)
        on left: 72
        on right: 32 33 34 37 40


State 0

    0 $accept: • program $end
    1 program: • declaration_list
    2 declaration_list: • declaration_list declaration
    3                 | • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier pid ID ';'
    7                | • type_specifier pid ID '[' pnum NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier pid ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


State 1

    8 type_specifier: "int" •

    $default  reduce using rule 8 (type_specifier)


State 2

    9 type_specifier: "void" •

    $default  reduce using rule 9 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •  [$end]
    2 declaration_list: declaration_list • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier pid ID ';'
    7                | • type_specifier pid ID '[' pnum NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier pid ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


State 5

    3 declaration_list: declaration •

    $default  reduce using rule 3 (declaration_list)


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var_declaration: type_specifier • pid ID ';'
    7                | type_specifier • pid ID '[' pnum NUM ']' ';'
   10 fun_declaration: type_specifier • pid ID '(' params ')' compound_stmt
   66 pid: ε •

    $default  reduce using rule 66 (pid)

    pid  go to state 11


State 8

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration_list declaration •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier pid • ID ';'
    7                | type_specifier pid • ID '[' pnum NUM ']' ';'
   10 fun_declaration: type_specifier pid • ID '(' params ')' compound_stmt

    ID  shift, and go to state 12


State 12

    6 var_declaration: type_specifier pid ID • ';'
    7                | type_specifier pid ID • '[' pnum NUM ']' ';'
   10 fun_declaration: type_specifier pid ID • '(' params ')' compound_stmt

    ';'  shift, and go to state 13
    '['  shift, and go to state 14
    '('  shift, and go to state 15


State 13

    6 var_declaration: type_specifier pid ID ';' •

    $default  reduce using rule 6 (var_declaration)


State 14

    7 var_declaration: type_specifier pid ID '[' • pnum NUM ']' ';'
   67 pnum: ε •

    $default  reduce using rule 67 (pnum)

    pnum  go to state 16


State 15

    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: type_specifier pid ID '(' • params ')' compound_stmt
   11 params: • param_list
   12       | • "void"
   13 param_list: • param_list ',' param
   14           | • param
   15 param: • type_specifier pid ID
   16      | • type_specifier pid ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 17

    type_specifier  go to state 18
    params          go to state 19
    param_list      go to state 20
    param           go to state 21


State 16

    7 var_declaration: type_specifier pid ID '[' pnum • NUM ']' ';'

    NUM  shift, and go to state 22


State 17

    9 type_specifier: "void" •  [ID]
   12 params: "void" •  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


State 18

   15 param: type_specifier • pid ID
   16      | type_specifier • pid ID '[' ']'
   66 pid: ε •

    $default  reduce using rule 66 (pid)

    pid  go to state 23


State 19

   10 fun_declaration: type_specifier pid ID '(' params • ')' compound_stmt

    ')'  shift, and go to state 24


State 20

   11 params: param_list •  [')']
   13 param_list: param_list • ',' param

    ','  shift, and go to state 25

    $default  reduce using rule 11 (params)


State 21

   14 param_list: param •

    $default  reduce using rule 14 (param_list)


State 22

    7 var_declaration: type_specifier pid ID '[' pnum NUM • ']' ';'

    ']'  shift, and go to state 26


State 23

   15 param: type_specifier pid • ID
   16      | type_specifier pid • ID '[' ']'

    ID  shift, and go to state 27


State 24

   10 fun_declaration: type_specifier pid ID '(' params ')' • compound_stmt
   17 compound_stmt: • '{' local_declarations statement_list '}'

    '{'  shift, and go to state 28

    compound_stmt  go to state 29


State 25

    8 type_specifier: • "int"
    9               | • "void"
   13 param_list: param_list ',' • param
   15 param: • type_specifier pid ID
   16      | • type_specifier pid ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 18
    param           go to state 30


State 26

    7 var_declaration: type_specifier pid ID '[' pnum NUM ']' • ';'

    ';'  shift, and go to state 31


State 27

   15 param: type_specifier pid ID •  [')', ',']
   16      | type_specifier pid ID • '[' ']'

    '['  shift, and go to state 32

    $default  reduce using rule 15 (param)


State 28

   17 compound_stmt: '{' • local_declarations statement_list '}'
   18 local_declarations: • local_declarations var_declaration
   19                   | ε •

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 33


State 29

   10 fun_declaration: type_specifier pid ID '(' params ')' compound_stmt •

    $default  reduce using rule 10 (fun_declaration)


State 30

   13 param_list: param_list ',' param •

    $default  reduce using rule 13 (param_list)


State 31

    7 var_declaration: type_specifier pid ID '[' pnum NUM ']' ';' •

    $default  reduce using rule 7 (var_declaration)


State 32

   16 param: type_specifier pid ID '[' • ']'

    ']'  shift, and go to state 34


State 33

    6 var_declaration: • type_specifier pid ID ';'
    7                | • type_specifier pid ID '[' pnum NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   17 compound_stmt: '{' local_declarations • statement_list '}'
   18 local_declarations: local_declarations • var_declaration
   20 statement_list: • statement_list statement
   21               | ε •  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch", "output"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 35
    type_specifier   go to state 36
    statement_list   go to state 37


State 34

   16 param: type_specifier pid ID '[' ']' •

    $default  reduce using rule 16 (param)


State 35

   18 local_declarations: local_declarations var_declaration •

    $default  reduce using rule 18 (local_declarations)


State 36

    6 var_declaration: type_specifier • pid ID ';'
    7                | type_specifier • pid ID '[' pnum NUM ']' ';'
   66 pid: ε •

    $default  reduce using rule 66 (pid)

    pid  go to state 38


State 37

   17 compound_stmt: • '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list • '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28          | • output_fun
   29 expression_stmt: • expression ';'
   30                | • "break" ';'
   31                | • ';'
   32 selection_stmt: • "if" '(' expression ')' save statement "endif"
   33               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   34 iteration_stmt: • "while" label '(' expression ')' save statement
   35 return_stmt: • "return" ';'
   36            | • "return" expression ';'
   37 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   65 output_fun: • "output" '(' expression ')' ';'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    '}'       shift, and go to state 41
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46
    "output"  shift, and go to state 47

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    output_fun           go to state 62
    pid                  go to state 63
    pnum                 go to state 64


State 38

    6 var_declaration: type_specifier pid • ID ';'
    7                | type_specifier pid • ID '[' pnum NUM ']' ';'

    ID  shift, and go to state 65


State 39

   31 expression_stmt: ';' •

    $default  reduce using rule 31 (expression_stmt)


State 40

   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   56       | '(' • expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 66
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 41

   17 compound_stmt: '{' local_declarations statement_list '}' •

    $default  reduce using rule 17 (compound_stmt)


State 42

   30 expression_stmt: "break" • ';'

    ';'  shift, and go to state 67


State 43

   32 selection_stmt: "if" • '(' expression ')' save statement "endif"
   33               | "if" • '(' expression ')' save statement "else" jpf_save statement "endif"

    '('  shift, and go to state 68


State 44

   34 iteration_stmt: "while" • label '(' expression ')' save statement
   69 label: ε •

    $default  reduce using rule 69 (label)

    label  go to state 69


State 45

   35 return_stmt: "return" • ';'
   36            | "return" • expression ';'
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    ';'  shift, and go to state 70
    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 71
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 46

   37 switch_stmt: "switch" • jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   70 jp_forward: ε •

    $default  reduce using rule 70 (jp_forward)

    jp_forward  go to state 72


State 47

   65 output_fun: "output" • '(' expression ')' ';'

    '('  shift, and go to state 73


State 48

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 49

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 50

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 51

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 52

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 53

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 54

   27 statement: switch_stmt •

    $default  reduce using rule 27 (statement)


State 55

   29 expression_stmt: expression • ';'

    ';'  shift, and go to state 74


State 56

   43 expression: var • '=' expression
   57 factor: var •  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 75

    $default  reduce using rule 57 (factor)


State 57

   44 expression: simple_expression •

    $default  reduce using rule 44 (expression)


State 58

   47 simple_expression: additive_expression • '<' additive_expression
   48                  | additive_expression •  [';', ']', ')', ',']
   49                  | additive_expression • "==" additive_expression
   50 additive_expression: additive_expression • '+' term
   52                    | additive_expression • '-' term

    '<'   shift, and go to state 76
    "=="  shift, and go to state 77
    '+'   shift, and go to state 78
    '-'   shift, and go to state 79

    $default  reduce using rule 48 (simple_expression)


State 59

   51 additive_expression: term •  [';', ']', ')', ',', '<', "==", '+', '-']
   53 term: term • '*' factor
   55     | term • '/' factor

    '*'  shift, and go to state 80
    '/'  shift, and go to state 81

    $default  reduce using rule 51 (additive_expression)


State 60

   54 term: factor •

    $default  reduce using rule 54 (term)


State 61

   58 factor: call •

    $default  reduce using rule 58 (factor)


State 62

   28 statement: output_fun •

    $default  reduce using rule 28 (statement)


State 63

   45 var: pid • ID
   46    | pid • ID '[' expression ']'
   60 call: pid • ID '(' args ')'

    ID  shift, and go to state 82


State 64

   59 factor: pnum • NUM

    NUM  shift, and go to state 83


State 65

    6 var_declaration: type_specifier pid ID • ';'
    7                | type_specifier pid ID • '[' pnum NUM ']' ';'

    ';'  shift, and go to state 13
    '['  shift, and go to state 14


State 66

   56 factor: '(' expression • ')'

    ')'  shift, and go to state 84


State 67

   30 expression_stmt: "break" ';' •

    $default  reduce using rule 30 (expression_stmt)


State 68

   32 selection_stmt: "if" '(' • expression ')' save statement "endif"
   33               | "if" '(' • expression ')' save statement "else" jpf_save statement "endif"
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 85
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 69

   34 iteration_stmt: "while" label • '(' expression ')' save statement

    '('  shift, and go to state 86


State 70

   35 return_stmt: "return" ';' •

    $default  reduce using rule 35 (return_stmt)


State 71

   36 return_stmt: "return" expression • ';'

    ';'  shift, and go to state 87


State 72

   37 switch_stmt: "switch" jp_forward • save '(' expression ')' '{' case_stmts default_stmt '}'
   72 save: ε •

    $default  reduce using rule 72 (save)

    save  go to state 88


State 73

   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   65 output_fun: "output" '(' • expression ')' ';'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 89
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 74

   29 expression_stmt: expression ';' •

    $default  reduce using rule 29 (expression_stmt)


State 75

   43 expression: • var '=' expression
   43           | var '=' • expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 90
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 76

   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: additive_expression '<' • additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    var                  go to state 91
    additive_expression  go to state 92
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 77

   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   49 simple_expression: additive_expression "==" • additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    var                  go to state 91
    additive_expression  go to state 93
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 78

   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   50 additive_expression: additive_expression '+' • term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    var     go to state 91
    term    go to state 94
    factor  go to state 60
    call    go to state 61
    pid     go to state 63
    pnum    go to state 64


State 79

   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   52 additive_expression: additive_expression '-' • term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    var     go to state 91
    term    go to state 95
    factor  go to state 60
    call    go to state 61
    pid     go to state 63
    pnum    go to state 64


State 80

   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   53 term: term '*' • factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    var     go to state 91
    factor  go to state 96
    call    go to state 61
    pid     go to state 63
    pnum    go to state 64


State 81

   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   55 term: term '/' • factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    var     go to state 91
    factor  go to state 97
    call    go to state 61
    pid     go to state 63
    pnum    go to state 64


State 82

   45 var: pid ID •  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   46    | pid ID • '[' expression ']'
   60 call: pid ID • '(' args ')'

    '['  shift, and go to state 98
    '('  shift, and go to state 99

    $default  reduce using rule 45 (var)


State 83

   59 factor: pnum NUM •

    $default  reduce using rule 59 (factor)


State 84

   56 factor: '(' expression ')' •

    $default  reduce using rule 56 (factor)


State 85

   32 selection_stmt: "if" '(' expression • ')' save statement "endif"
   33               | "if" '(' expression • ')' save statement "else" jpf_save statement "endif"

    ')'  shift, and go to state 100


State 86

   34 iteration_stmt: "while" label '(' • expression ')' save statement
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 101
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 87

   36 return_stmt: "return" expression ';' •

    $default  reduce using rule 36 (return_stmt)


State 88

   37 switch_stmt: "switch" jp_forward save • '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 102


State 89

   65 output_fun: "output" '(' expression • ')' ';'

    ')'  shift, and go to state 103


State 90

   43 expression: var '=' expression •

    $default  reduce using rule 43 (expression)


State 91

   57 factor: var •

    $default  reduce using rule 57 (factor)


State 92

   47 simple_expression: additive_expression '<' additive_expression •  [';', ']', ')', ',']
   50 additive_expression: additive_expression • '+' term
   52                    | additive_expression • '-' term

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79

    $default  reduce using rule 47 (simple_expression)


State 93

   49 simple_expression: additive_expression "==" additive_expression •  [';', ']', ')', ',']
   50 additive_expression: additive_expression • '+' term
   52                    | additive_expression • '-' term

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79

    $default  reduce using rule 49 (simple_expression)


State 94

   50 additive_expression: additive_expression '+' term •  [';', ']', ')', ',', '<', "==", '+', '-']
   53 term: term • '*' factor
   55     | term • '/' factor

    '*'  shift, and go to state 80
    '/'  shift, and go to state 81

    $default  reduce using rule 50 (additive_expression)


State 95

   52 additive_expression: additive_expression '-' term •  [';', ']', ')', ',', '<', "==", '+', '-']
   53 term: term • '*' factor
   55     | term • '/' factor

    '*'  shift, and go to state 80
    '/'  shift, and go to state 81

    $default  reduce using rule 52 (additive_expression)


State 96

   53 term: term '*' factor •

    $default  reduce using rule 53 (term)


State 97

   55 term: term '/' factor •

    $default  reduce using rule 55 (term)


State 98

   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   46    | pid ID '[' • expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 104
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 99

   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   60     | pid ID '(' • args ')'
   61 args: • arg_list
   62     | ε •  [')']
   63 arg_list: • arg_list ',' expression
   64         | • expression
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    ID        reduce using rule 66 (pid)
    $default  reduce using rule 62 (args)

    expression           go to state 105
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    args                 go to state 106
    arg_list             go to state 107
    pid                  go to state 63
    pnum                 go to state 64


State 100

   32 selection_stmt: "if" '(' expression ')' • save statement "endif"
   33               | "if" '(' expression ')' • save statement "else" jpf_save statement "endif"
   72 save: ε •

    $default  reduce using rule 72 (save)

    save  go to state 108


State 101

   34 iteration_stmt: "while" label '(' expression • ')' save statement

    ')'  shift, and go to state 109


State 102

   37 switch_stmt: "switch" jp_forward save '(' • expression ')' '{' case_stmts default_stmt '}'
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 110
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 103

   65 output_fun: "output" '(' expression ')' • ';'

    ';'  shift, and go to state 111


State 104

   46 var: pid ID '[' expression • ']'

    ']'  shift, and go to state 112


State 105

   64 arg_list: expression •

    $default  reduce using rule 64 (arg_list)


State 106

   60 call: pid ID '(' args • ')'

    ')'  shift, and go to state 113


State 107

   61 args: arg_list •  [')']
   63 arg_list: arg_list • ',' expression

    ','  shift, and go to state 114

    $default  reduce using rule 61 (args)


State 108

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28          | • output_fun
   29 expression_stmt: • expression ';'
   30                | • "break" ';'
   31                | • ';'
   32 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | "if" '(' expression ')' save • statement "endif"
   33               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33               | "if" '(' expression ')' save • statement "else" jpf_save statement "endif"
   34 iteration_stmt: • "while" label '(' expression ')' save statement
   35 return_stmt: • "return" ';'
   36            | • "return" expression ';'
   37 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   65 output_fun: • "output" '(' expression ')' ';'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46
    "output"  shift, and go to state 47

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    compound_stmt        go to state 48
    statement            go to state 115
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    output_fun           go to state 62
    pid                  go to state 63
    pnum                 go to state 64


State 109

   34 iteration_stmt: "while" label '(' expression ')' • save statement
   72 save: ε •

    $default  reduce using rule 72 (save)

    save  go to state 116


State 110

   37 switch_stmt: "switch" jp_forward save '(' expression • ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 117


State 111

   65 output_fun: "output" '(' expression ')' ';' •

    $default  reduce using rule 65 (output_fun)


State 112

   46 var: pid ID '[' expression ']' •

    $default  reduce using rule 46 (var)


State 113

   60 call: pid ID '(' args ')' •

    $default  reduce using rule 60 (call)


State 114

   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   63 arg_list: arg_list ',' • expression
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    '('  shift, and go to state 40

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    expression           go to state 118
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 63
    pnum                 go to state 64


State 115

   32 selection_stmt: "if" '(' expression ')' save statement • "endif"
   33               | "if" '(' expression ')' save statement • "else" jpf_save statement "endif"

    "endif"  shift, and go to state 119
    "else"   shift, and go to state 120


State 116

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28          | • output_fun
   29 expression_stmt: • expression ';'
   30                | • "break" ';'
   31                | • ';'
   32 selection_stmt: • "if" '(' expression ')' save statement "endif"
   33               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   34 iteration_stmt: • "while" label '(' expression ')' save statement
   34               | "while" label '(' expression ')' save • statement
   35 return_stmt: • "return" ';'
   36            | • "return" expression ';'
   37 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   65 output_fun: • "output" '(' expression ')' ';'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46
    "output"  shift, and go to state 47

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    compound_stmt        go to state 48
    statement            go to state 121
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    output_fun           go to state 62
    pid                  go to state 63
    pnum                 go to state 64


State 117

   37 switch_stmt: "switch" jp_forward save '(' expression ')' • '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 122


State 118

   63 arg_list: arg_list ',' expression •

    $default  reduce using rule 63 (arg_list)


State 119

   32 selection_stmt: "if" '(' expression ')' save statement "endif" •

    $default  reduce using rule 32 (selection_stmt)


State 120

   33 selection_stmt: "if" '(' expression ')' save statement "else" • jpf_save statement "endif"
   68 jpf_save: ε •

    $default  reduce using rule 68 (jpf_save)

    jpf_save  go to state 123


State 121

   34 iteration_stmt: "while" label '(' expression ')' save statement •

    $default  reduce using rule 34 (iteration_stmt)


State 122

   37 switch_stmt: "switch" jp_forward save '(' expression ')' '{' • case_stmts default_stmt '}'
   38 case_stmts: • case_stmts case_stmt
   39           | ε •

    $default  reduce using rule 39 (case_stmts)

    case_stmts  go to state 124


State 123

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28          | • output_fun
   29 expression_stmt: • expression ';'
   30                | • "break" ';'
   31                | • ';'
   32 selection_stmt: • "if" '(' expression ')' save statement "endif"
   33               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33               | "if" '(' expression ')' save statement "else" jpf_save • statement "endif"
   34 iteration_stmt: • "while" label '(' expression ')' save statement
   35 return_stmt: • "return" ';'
   36            | • "return" expression ';'
   37 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   65 output_fun: • "output" '(' expression ')' ';'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46
    "output"  shift, and go to state 47

    NUM       reduce using rule 67 (pnum)
    $default  reduce using rule 66 (pid)

    compound_stmt        go to state 48
    statement            go to state 125
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    output_fun           go to state 62
    pid                  go to state 63
    pnum                 go to state 64


State 124

   37 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts • default_stmt '}'
   38 case_stmts: case_stmts • case_stmt
   40 case_stmt: • "case" pnum NUM switch_compare save ':' statement_list
   41 default_stmt: • "default" ':' statement_list
   42             | ε •  ['}']

    "case"     shift, and go to state 126
    "default"  shift, and go to state 127

    $default  reduce using rule 42 (default_stmt)

    case_stmt     go to state 128
    default_stmt  go to state 129


State 125

   33 selection_stmt: "if" '(' expression ')' save statement "else" jpf_save statement • "endif"

    "endif"  shift, and go to state 130


State 126

   40 case_stmt: "case" • pnum NUM switch_compare save ':' statement_list
   67 pnum: ε •

    $default  reduce using rule 67 (pnum)

    pnum  go to state 131


State 127

   41 default_stmt: "default" • ':' statement_list

    ':'  shift, and go to state 132


State 128

   38 case_stmts: case_stmts case_stmt •

    $default  reduce using rule 38 (case_stmts)


State 129

   37 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt • '}'

    '}'  shift, and go to state 133


State 130

   33 selection_stmt: "if" '(' expression ')' save statement "else" jpf_save statement "endif" •

    $default  reduce using rule 33 (selection_stmt)


State 131

   40 case_stmt: "case" pnum • NUM switch_compare save ':' statement_list

    NUM  shift, and go to state 134


State 132

   20 statement_list: • statement_list statement
   21               | ε •
   41 default_stmt: "default" ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 135


State 133

   37 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}' •

    $default  reduce using rule 37 (switch_stmt)


State 134

   40 case_stmt: "case" pnum NUM • switch_compare save ':' statement_list
   71 switch_compare: ε •

    $default  reduce using rule 71 (switch_compare)

    switch_compare  go to state 136


State 135

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28          | • output_fun
   29 expression_stmt: • expression ';'
   30                | • "break" ';'
   31                | • ';'
   32 selection_stmt: • "if" '(' expression ')' save statement "endif"
   33               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   34 iteration_stmt: • "while" label '(' expression ')' save statement
   35 return_stmt: • "return" ';'
   36            | • "return" expression ';'
   37 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   41 default_stmt: "default" ':' statement_list •  ['}']
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   65 output_fun: • "output" '(' expression ')' ';'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46
    "output"  shift, and go to state 47

    NUM       reduce using rule 67 (pnum)
    ID        reduce using rule 66 (pid)
    $default  reduce using rule 41 (default_stmt)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    output_fun           go to state 62
    pid                  go to state 63
    pnum                 go to state 64


State 136

   40 case_stmt: "case" pnum NUM switch_compare • save ':' statement_list
   72 save: ε •

    $default  reduce using rule 72 (save)

    save  go to state 137


State 137

   40 case_stmt: "case" pnum NUM switch_compare save • ':' statement_list

    ':'  shift, and go to state 138


State 138

   20 statement_list: • statement_list statement
   21               | ε •
   40 case_stmt: "case" pnum NUM switch_compare save ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 139


State 139

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28          | • output_fun
   29 expression_stmt: • expression ';'
   30                | • "break" ';'
   31                | • ';'
   32 selection_stmt: • "if" '(' expression ')' save statement "endif"
   33               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   34 iteration_stmt: • "while" label '(' expression ')' save statement
   35 return_stmt: • "return" ';'
   36            | • "return" expression ';'
   37 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   40 case_stmt: "case" pnum NUM switch_compare save ':' statement_list •  ['}', "case", "default"]
   43 expression: • var '=' expression
   44           | • simple_expression
   45 var: • pid ID
   46    | • pid ID '[' expression ']'
   47 simple_expression: • additive_expression '<' additive_expression
   48                  | • additive_expression
   49                  | • additive_expression "==" additive_expression
   50 additive_expression: • additive_expression '+' term
   51                    | • term
   52                    | • additive_expression '-' term
   53 term: • term '*' factor
   54     | • factor
   55     | • term '/' factor
   56 factor: • '(' expression ')'
   57       | • var
   58       | • call
   59       | • pnum NUM
   60 call: • pid ID '(' args ')'
   65 output_fun: • "output" '(' expression ')' ';'
   66 pid: ε •  [ID]
   67 pnum: ε •  [NUM]

    ';'       shift, and go to state 39
    '('       shift, and go to state 40
    '{'       shift, and go to state 28
    "break"   shift, and go to state 42
    "if"      shift, and go to state 43
    "while"   shift, and go to state 44
    "return"  shift, and go to state 45
    "switch"  shift, and go to state 46
    "output"  shift, and go to state 47

    NUM       reduce using rule 67 (pnum)
    ID        reduce using rule 66 (pid)
    $default  reduce using rule 40 (case_stmt)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    output_fun           go to state 62
    pid                  go to state 63
    pnum                 go to state 64
