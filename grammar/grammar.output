Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier ID ';'
    7                | type_specifier ID '[' pnum add_array_type_kind NUM ']' ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier ID add_func_kind add_scope '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier ID
   16      | type_specifier ID '[' ']'

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | ε

   20 statement_list: statement_list statement
   21               | ε

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression ';'
   29                | "break" ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression ')' save statement "endif"
   32               | "if" '(' expression ')' save statement "else" jpf_save statement "endif"

   33 iteration_stmt: "while" jp_forward break_save label '(' expression ')' save statement

   34 return_stmt: "return" ';'
   35            | "return" expression ';'

   36 switch_stmt: "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | ε

   39 case_stmt: "case" pnum NUM switch_compare save ':' statement_list

   40 default_stmt: "default" ':' statement_list
   41             | ε

   42 expression: var '=' expression
   43           | simple_expression

   44 var: pid ID
   45    | pid ID '[' expression ']'

   46 simple_expression: additive_expression '<' additive_expression
   47                  | additive_expression
   48                  | additive_expression "==" additive_expression

   49 additive_expression: additive_expression '+' term
   50                    | term
   51                    | additive_expression '-' term

   52 term: term '*' factor
   53     | factor
   54     | term '/' factor

   55 factor: '(' expression ')'
   56       | var
   57       | call
   58       | pnum NUM

   59 call: pid ID '(' args ')'

   60 args: arg_list
   61     | ε

   62 arg_list: arg_list ',' expression
   63         | expression

   64 pid: ε

   65 pnum: ε

   66 jpf_save: ε

   67 label: ε

   68 jp_forward: ε

   69 switch_compare: ε

   70 save: ε

   71 break_save: ε

   72 add_array_type_kind: ε

   73 add_func_kind: ε

   74 add_scope: ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 31 32 33 36 55 59
    ')' (41) 10 31 32 33 36 55 59
    '*' (42) 52
    '+' (43) 49
    ',' (44) 13 62
    '-' (45) 51
    '/' (47) 54
    ':' (58) 39 40
    ';' (59) 6 7 28 29 30 34 35
    '<' (60) 46
    '=' (61) 42
    '[' (91) 7 16 45
    ']' (93) 7 16 45
    '{' (123) 17 36
    '}' (125) 17 36
    error (256)
    NUM (258) 7 39 58
    ID (259) 6 7 10 15 16 44 45 59
    "int" (260) 8
    "void" (261) 9 12
    "break" (262) 29
    "if" (263) 31 32
    "endif" (264) 31 32
    "else" (265) 32
    "while" (266) 33
    "return" (267) 34 35
    "switch" (268) 36
    "case" (269) 39
    "default" (270) 40
    "==" (271) 48


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    declaration_list (34)
        on left: 2 3
        on right: 1 2
    declaration (35)
        on left: 4 5
        on right: 2 3
    var_declaration (36)
        on left: 6 7
        on right: 4 18
    type_specifier (37)
        on left: 8 9
        on right: 6 7 10 15 16
    fun_declaration (38)
        on left: 10
        on right: 5
    params (39)
        on left: 11 12
        on right: 10
    param_list (40)
        on left: 13 14
        on right: 11 13
    param (41)
        on left: 15 16
        on right: 13 14
    compound_stmt (42)
        on left: 17
        on right: 10 23
    local_declarations (43)
        on left: 18 19
        on right: 17 18
    statement_list (44)
        on left: 20 21
        on right: 17 20 39 40
    statement (45)
        on left: 22 23 24 25 26 27
        on right: 20 31 32 33
    expression_stmt (46)
        on left: 28 29 30
        on right: 22
    selection_stmt (47)
        on left: 31 32
        on right: 24
    iteration_stmt (48)
        on left: 33
        on right: 25
    return_stmt (49)
        on left: 34 35
        on right: 26
    switch_stmt (50)
        on left: 36
        on right: 27
    case_stmts (51)
        on left: 37 38
        on right: 36 37
    case_stmt (52)
        on left: 39
        on right: 37
    default_stmt (53)
        on left: 40 41
        on right: 36
    expression (54)
        on left: 42 43
        on right: 28 31 32 33 35 36 42 45 55 62 63
    var (55)
        on left: 44 45
        on right: 42 56
    simple_expression (56)
        on left: 46 47 48
        on right: 43
    additive_expression (57)
        on left: 49 50 51
        on right: 46 47 48 49 51
    term (58)
        on left: 52 53 54
        on right: 49 50 51 52 54
    factor (59)
        on left: 55 56 57 58
        on right: 52 53 54
    call (60)
        on left: 59
        on right: 57
    args (61)
        on left: 60 61
        on right: 59
    arg_list (62)
        on left: 62 63
        on right: 60 62
    pid (63)
        on left: 64
        on right: 44 45 59
    pnum (64)
        on left: 65
        on right: 7 39 58
    jpf_save (65)
        on left: 66
        on right: 32
    label (66)
        on left: 67
        on right: 33
    jp_forward (67)
        on left: 68
        on right: 33 36
    switch_compare (68)
        on left: 69
        on right: 39
    save (69)
        on left: 70
        on right: 31 32 33 39
    break_save (70)
        on left: 71
        on right: 33 36
    add_array_type_kind (71)
        on left: 72
        on right: 7
    add_func_kind (72)
        on left: 73
        on right: 10
    add_scope (73)
        on left: 74
        on right: 10


State 0

    0 $accept: • program $end
    1 program: • declaration_list
    2 declaration_list: • declaration_list declaration
    3                 | • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';'
    7                | • type_specifier ID '[' pnum add_array_type_kind NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID add_func_kind add_scope '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


State 1

    8 type_specifier: "int" •

    $default  reduce using rule 8 (type_specifier)


State 2

    9 type_specifier: "void" •

    $default  reduce using rule 9 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •  [$end]
    2 declaration_list: declaration_list • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';'
    7                | • type_specifier ID '[' pnum add_array_type_kind NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID add_func_kind add_scope '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


State 5

    3 declaration_list: declaration •

    $default  reduce using rule 3 (declaration_list)


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var_declaration: type_specifier • ID ';'
    7                | type_specifier • ID '[' pnum add_array_type_kind NUM ']' ';'
   10 fun_declaration: type_specifier • ID add_func_kind add_scope '(' params ')' compound_stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration_list declaration •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier ID • ';'
    7                | type_specifier ID • '[' pnum add_array_type_kind NUM ']' ';'
   10 fun_declaration: type_specifier ID • add_func_kind add_scope '(' params ')' compound_stmt
   73 add_func_kind: ε •  ['(']

    ';'  shift, and go to state 12
    '['  shift, and go to state 13

    $default  reduce using rule 73 (add_func_kind)

    add_func_kind  go to state 14


State 12

    6 var_declaration: type_specifier ID ';' •

    $default  reduce using rule 6 (var_declaration)


State 13

    7 var_declaration: type_specifier ID '[' • pnum add_array_type_kind NUM ']' ';'
   65 pnum: ε •

    $default  reduce using rule 65 (pnum)

    pnum  go to state 15


State 14

   10 fun_declaration: type_specifier ID add_func_kind • add_scope '(' params ')' compound_stmt
   74 add_scope: ε •

    $default  reduce using rule 74 (add_scope)

    add_scope  go to state 16


State 15

    7 var_declaration: type_specifier ID '[' pnum • add_array_type_kind NUM ']' ';'
   72 add_array_type_kind: ε •

    $default  reduce using rule 72 (add_array_type_kind)

    add_array_type_kind  go to state 17


State 16

   10 fun_declaration: type_specifier ID add_func_kind add_scope • '(' params ')' compound_stmt

    '('  shift, and go to state 18


State 17

    7 var_declaration: type_specifier ID '[' pnum add_array_type_kind • NUM ']' ';'

    NUM  shift, and go to state 19


State 18

    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: type_specifier ID add_func_kind add_scope '(' • params ')' compound_stmt
   11 params: • param_list
   12       | • "void"
   13 param_list: • param_list ',' param
   14           | • param
   15 param: • type_specifier ID
   16      | • type_specifier ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 20

    type_specifier  go to state 21
    params          go to state 22
    param_list      go to state 23
    param           go to state 24


State 19

    7 var_declaration: type_specifier ID '[' pnum add_array_type_kind NUM • ']' ';'

    ']'  shift, and go to state 25


State 20

    9 type_specifier: "void" •  [ID]
   12 params: "void" •  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


State 21

   15 param: type_specifier • ID
   16      | type_specifier • ID '[' ']'

    ID  shift, and go to state 26


State 22

   10 fun_declaration: type_specifier ID add_func_kind add_scope '(' params • ')' compound_stmt

    ')'  shift, and go to state 27


State 23

   11 params: param_list •  [')']
   13 param_list: param_list • ',' param

    ','  shift, and go to state 28

    $default  reduce using rule 11 (params)


State 24

   14 param_list: param •

    $default  reduce using rule 14 (param_list)


State 25

    7 var_declaration: type_specifier ID '[' pnum add_array_type_kind NUM ']' • ';'

    ';'  shift, and go to state 29


State 26

   15 param: type_specifier ID •  [')', ',']
   16      | type_specifier ID • '[' ']'

    '['  shift, and go to state 30

    $default  reduce using rule 15 (param)


State 27

   10 fun_declaration: type_specifier ID add_func_kind add_scope '(' params ')' • compound_stmt
   17 compound_stmt: • '{' local_declarations statement_list '}'

    '{'  shift, and go to state 31

    compound_stmt  go to state 32


State 28

    8 type_specifier: • "int"
    9               | • "void"
   13 param_list: param_list ',' • param
   15 param: • type_specifier ID
   16      | • type_specifier ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 21
    param           go to state 33


State 29

    7 var_declaration: type_specifier ID '[' pnum add_array_type_kind NUM ']' ';' •

    $default  reduce using rule 7 (var_declaration)


State 30

   16 param: type_specifier ID '[' • ']'

    ']'  shift, and go to state 34


State 31

   17 compound_stmt: '{' • local_declarations statement_list '}'
   18 local_declarations: • local_declarations var_declaration
   19                   | ε •

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 35


State 32

   10 fun_declaration: type_specifier ID add_func_kind add_scope '(' params ')' compound_stmt •

    $default  reduce using rule 10 (fun_declaration)


State 33

   13 param_list: param_list ',' param •

    $default  reduce using rule 13 (param_list)


State 34

   16 param: type_specifier ID '[' ']' •

    $default  reduce using rule 16 (param)


State 35

    6 var_declaration: • type_specifier ID ';'
    7                | • type_specifier ID '[' pnum add_array_type_kind NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   17 compound_stmt: '{' local_declarations • statement_list '}'
   18 local_declarations: local_declarations • var_declaration
   20 statement_list: • statement_list statement
   21               | ε •  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 36
    type_specifier   go to state 37
    statement_list   go to state 38


State 36

   18 local_declarations: local_declarations var_declaration •

    $default  reduce using rule 18 (local_declarations)


State 37

    6 var_declaration: type_specifier • ID ';'
    7                | type_specifier • ID '[' pnum add_array_type_kind NUM ']' ';'

    ID  shift, and go to state 39


State 38

   17 compound_stmt: • '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list • '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" jp_forward break_save label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 31
    '}'       shift, and go to state 42
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 39

    6 var_declaration: type_specifier ID • ';'
    7                | type_specifier ID • '[' pnum add_array_type_kind NUM ']' ';'

    ';'  shift, and go to state 12
    '['  shift, and go to state 13


State 40

   30 expression_stmt: ';' •

    $default  reduce using rule 30 (expression_stmt)


State 41

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   55       | '(' • expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 64
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 42

   17 compound_stmt: '{' local_declarations statement_list '}' •

    $default  reduce using rule 17 (compound_stmt)


State 43

   29 expression_stmt: "break" • ';'

    ';'  shift, and go to state 65


State 44

   31 selection_stmt: "if" • '(' expression ')' save statement "endif"
   32               | "if" • '(' expression ')' save statement "else" jpf_save statement "endif"

    '('  shift, and go to state 66


State 45

   33 iteration_stmt: "while" • jp_forward break_save label '(' expression ')' save statement
   68 jp_forward: ε •

    $default  reduce using rule 68 (jp_forward)

    jp_forward  go to state 67


State 46

   34 return_stmt: "return" • ';'
   35            | "return" • expression ';'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'  shift, and go to state 68
    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 69
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 47

   36 switch_stmt: "switch" • jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'
   68 jp_forward: ε •

    $default  reduce using rule 68 (jp_forward)

    jp_forward  go to state 70


State 48

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 49

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 50

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 51

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 52

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 53

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 54

   27 statement: switch_stmt •

    $default  reduce using rule 27 (statement)


State 55

   28 expression_stmt: expression • ';'

    ';'  shift, and go to state 71


State 56

   42 expression: var • '=' expression
   56 factor: var •  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 72

    $default  reduce using rule 56 (factor)


State 57

   43 expression: simple_expression •

    $default  reduce using rule 43 (expression)


State 58

   46 simple_expression: additive_expression • '<' additive_expression
   47                  | additive_expression •  [';', ']', ')', ',']
   48                  | additive_expression • "==" additive_expression
   49 additive_expression: additive_expression • '+' term
   51                    | additive_expression • '-' term

    '<'   shift, and go to state 73
    "=="  shift, and go to state 74
    '+'   shift, and go to state 75
    '-'   shift, and go to state 76

    $default  reduce using rule 47 (simple_expression)


State 59

   50 additive_expression: term •  [';', ']', ')', ',', '<', "==", '+', '-']
   52 term: term • '*' factor
   54     | term • '/' factor

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78

    $default  reduce using rule 50 (additive_expression)


State 60

   53 term: factor •

    $default  reduce using rule 53 (term)


State 61

   57 factor: call •

    $default  reduce using rule 57 (factor)


State 62

   44 var: pid • ID
   45    | pid • ID '[' expression ']'
   59 call: pid • ID '(' args ')'

    ID  shift, and go to state 79


State 63

   58 factor: pnum • NUM

    NUM  shift, and go to state 80


State 64

   55 factor: '(' expression • ')'

    ')'  shift, and go to state 81


State 65

   29 expression_stmt: "break" ';' •

    $default  reduce using rule 29 (expression_stmt)


State 66

   31 selection_stmt: "if" '(' • expression ')' save statement "endif"
   32               | "if" '(' • expression ')' save statement "else" jpf_save statement "endif"
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 82
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 67

   33 iteration_stmt: "while" jp_forward • break_save label '(' expression ')' save statement
   71 break_save: ε •

    $default  reduce using rule 71 (break_save)

    break_save  go to state 83


State 68

   34 return_stmt: "return" ';' •

    $default  reduce using rule 34 (return_stmt)


State 69

   35 return_stmt: "return" expression • ';'

    ';'  shift, and go to state 84


State 70

   36 switch_stmt: "switch" jp_forward • break_save '(' expression ')' '{' case_stmts default_stmt '}'
   71 break_save: ε •

    $default  reduce using rule 71 (break_save)

    break_save  go to state 85


State 71

   28 expression_stmt: expression ';' •

    $default  reduce using rule 28 (expression_stmt)


State 72

   42 expression: • var '=' expression
   42           | var '=' • expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 86
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 73

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: additive_expression '<' • additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var                  go to state 87
    additive_expression  go to state 88
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 74

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   48 simple_expression: additive_expression "==" • additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var                  go to state 87
    additive_expression  go to state 89
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 75

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   49 additive_expression: additive_expression '+' • term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 87
    term    go to state 90
    factor  go to state 60
    call    go to state 61
    pid     go to state 62
    pnum    go to state 63


State 76

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   51 additive_expression: additive_expression '-' • term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 87
    term    go to state 91
    factor  go to state 60
    call    go to state 61
    pid     go to state 62
    pnum    go to state 63


State 77

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   52 term: term '*' • factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 87
    factor  go to state 92
    call    go to state 61
    pid     go to state 62
    pnum    go to state 63


State 78

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   54 term: term '/' • factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 87
    factor  go to state 93
    call    go to state 61
    pid     go to state 62
    pnum    go to state 63


State 79

   44 var: pid ID •  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   45    | pid ID • '[' expression ']'
   59 call: pid ID • '(' args ')'

    '['  shift, and go to state 94
    '('  shift, and go to state 95

    $default  reduce using rule 44 (var)


State 80

   58 factor: pnum NUM •

    $default  reduce using rule 58 (factor)


State 81

   55 factor: '(' expression ')' •

    $default  reduce using rule 55 (factor)


State 82

   31 selection_stmt: "if" '(' expression • ')' save statement "endif"
   32               | "if" '(' expression • ')' save statement "else" jpf_save statement "endif"

    ')'  shift, and go to state 96


State 83

   33 iteration_stmt: "while" jp_forward break_save • label '(' expression ')' save statement
   67 label: ε •

    $default  reduce using rule 67 (label)

    label  go to state 97


State 84

   35 return_stmt: "return" expression ';' •

    $default  reduce using rule 35 (return_stmt)


State 85

   36 switch_stmt: "switch" jp_forward break_save • '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 98


State 86

   42 expression: var '=' expression •

    $default  reduce using rule 42 (expression)


State 87

   56 factor: var •

    $default  reduce using rule 56 (factor)


State 88

   46 simple_expression: additive_expression '<' additive_expression •  [';', ']', ')', ',']
   49 additive_expression: additive_expression • '+' term
   51                    | additive_expression • '-' term

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76

    $default  reduce using rule 46 (simple_expression)


State 89

   48 simple_expression: additive_expression "==" additive_expression •  [';', ']', ')', ',']
   49 additive_expression: additive_expression • '+' term
   51                    | additive_expression • '-' term

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76

    $default  reduce using rule 48 (simple_expression)


State 90

   49 additive_expression: additive_expression '+' term •  [';', ']', ')', ',', '<', "==", '+', '-']
   52 term: term • '*' factor
   54     | term • '/' factor

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78

    $default  reduce using rule 49 (additive_expression)


State 91

   51 additive_expression: additive_expression '-' term •  [';', ']', ')', ',', '<', "==", '+', '-']
   52 term: term • '*' factor
   54     | term • '/' factor

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78

    $default  reduce using rule 51 (additive_expression)


State 92

   52 term: term '*' factor •

    $default  reduce using rule 52 (term)


State 93

   54 term: term '/' factor •

    $default  reduce using rule 54 (term)


State 94

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   45    | pid ID '[' • expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 99
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 95

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   59     | pid ID '(' • args ')'
   60 args: • arg_list
   61     | ε •  [')']
   62 arg_list: • arg_list ',' expression
   63         | • expression
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    ID        reduce using rule 64 (pid)
    $default  reduce using rule 61 (args)

    expression           go to state 100
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    args                 go to state 101
    arg_list             go to state 102
    pid                  go to state 62
    pnum                 go to state 63


State 96

   31 selection_stmt: "if" '(' expression ')' • save statement "endif"
   32               | "if" '(' expression ')' • save statement "else" jpf_save statement "endif"
   70 save: ε •

    $default  reduce using rule 70 (save)

    save  go to state 103


State 97

   33 iteration_stmt: "while" jp_forward break_save label • '(' expression ')' save statement

    '('  shift, and go to state 104


State 98

   36 switch_stmt: "switch" jp_forward break_save '(' • expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 105
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 99

   45 var: pid ID '[' expression • ']'

    ']'  shift, and go to state 106


State 100

   63 arg_list: expression •

    $default  reduce using rule 63 (arg_list)


State 101

   59 call: pid ID '(' args • ')'

    ')'  shift, and go to state 107


State 102

   60 args: arg_list •  [')']
   62 arg_list: arg_list • ',' expression

    ','  shift, and go to state 108

    $default  reduce using rule 60 (args)


State 103

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   31               | "if" '(' expression ')' save • statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   32               | "if" '(' expression ')' save • statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" jp_forward break_save label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 31
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 48
    statement            go to state 109
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 104

   33 iteration_stmt: "while" jp_forward break_save label '(' • expression ')' save statement
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 110
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 105

   36 switch_stmt: "switch" jp_forward break_save '(' expression • ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 111


State 106

   45 var: pid ID '[' expression ']' •

    $default  reduce using rule 45 (var)


State 107

   59 call: pid ID '(' args ')' •

    $default  reduce using rule 59 (call)


State 108

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   62 arg_list: arg_list ',' • expression
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 112
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 109

   31 selection_stmt: "if" '(' expression ')' save statement • "endif"
   32               | "if" '(' expression ')' save statement • "else" jpf_save statement "endif"

    "endif"  shift, and go to state 113
    "else"   shift, and go to state 114


State 110

   33 iteration_stmt: "while" jp_forward break_save label '(' expression • ')' save statement

    ')'  shift, and go to state 115


State 111

   36 switch_stmt: "switch" jp_forward break_save '(' expression ')' • '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 116


State 112

   62 arg_list: arg_list ',' expression •

    $default  reduce using rule 62 (arg_list)


State 113

   31 selection_stmt: "if" '(' expression ')' save statement "endif" •

    $default  reduce using rule 31 (selection_stmt)


State 114

   32 selection_stmt: "if" '(' expression ')' save statement "else" • jpf_save statement "endif"
   66 jpf_save: ε •

    $default  reduce using rule 66 (jpf_save)

    jpf_save  go to state 117


State 115

   33 iteration_stmt: "while" jp_forward break_save label '(' expression ')' • save statement
   70 save: ε •

    $default  reduce using rule 70 (save)

    save  go to state 118


State 116

   36 switch_stmt: "switch" jp_forward break_save '(' expression ')' '{' • case_stmts default_stmt '}'
   37 case_stmts: • case_stmts case_stmt
   38           | ε •

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 119


State 117

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   32               | "if" '(' expression ')' save statement "else" jpf_save • statement "endif"
   33 iteration_stmt: • "while" jp_forward break_save label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 31
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 48
    statement            go to state 120
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 118

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" jp_forward break_save label '(' expression ')' save statement
   33               | "while" jp_forward break_save label '(' expression ')' save • statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 31
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 48
    statement            go to state 121
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 119

   36 switch_stmt: "switch" jp_forward break_save '(' expression ')' '{' case_stmts • default_stmt '}'
   37 case_stmts: case_stmts • case_stmt
   39 case_stmt: • "case" pnum NUM switch_compare save ':' statement_list
   40 default_stmt: • "default" ':' statement_list
   41             | ε •  ['}']

    "case"     shift, and go to state 122
    "default"  shift, and go to state 123

    $default  reduce using rule 41 (default_stmt)

    case_stmt     go to state 124
    default_stmt  go to state 125


State 120

   32 selection_stmt: "if" '(' expression ')' save statement "else" jpf_save statement • "endif"

    "endif"  shift, and go to state 126


State 121

   33 iteration_stmt: "while" jp_forward break_save label '(' expression ')' save statement •

    $default  reduce using rule 33 (iteration_stmt)


State 122

   39 case_stmt: "case" • pnum NUM switch_compare save ':' statement_list
   65 pnum: ε •

    $default  reduce using rule 65 (pnum)

    pnum  go to state 127


State 123

   40 default_stmt: "default" • ':' statement_list

    ':'  shift, and go to state 128


State 124

   37 case_stmts: case_stmts case_stmt •

    $default  reduce using rule 37 (case_stmts)


State 125

   36 switch_stmt: "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt • '}'

    '}'  shift, and go to state 129


State 126

   32 selection_stmt: "if" '(' expression ')' save statement "else" jpf_save statement "endif" •

    $default  reduce using rule 32 (selection_stmt)


State 127

   39 case_stmt: "case" pnum • NUM switch_compare save ':' statement_list

    NUM  shift, and go to state 130


State 128

   20 statement_list: • statement_list statement
   21               | ε •
   40 default_stmt: "default" ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 131


State 129

   36 switch_stmt: "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}' •

    $default  reduce using rule 36 (switch_stmt)


State 130

   39 case_stmt: "case" pnum NUM • switch_compare save ':' statement_list
   69 switch_compare: ε •

    $default  reduce using rule 69 (switch_compare)

    switch_compare  go to state 132


State 131

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" jp_forward break_save label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'
   40 default_stmt: "default" ':' statement_list •  ['}']
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 31
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47

    NUM       reduce using rule 65 (pnum)
    ID        reduce using rule 64 (pid)
    $default  reduce using rule 40 (default_stmt)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63


State 132

   39 case_stmt: "case" pnum NUM switch_compare • save ':' statement_list
   70 save: ε •

    $default  reduce using rule 70 (save)

    save  go to state 133


State 133

   39 case_stmt: "case" pnum NUM switch_compare save • ':' statement_list

    ':'  shift, and go to state 134


State 134

   20 statement_list: • statement_list statement
   21               | ε •
   39 case_stmt: "case" pnum NUM switch_compare save ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 135


State 135

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" jp_forward break_save label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward break_save '(' expression ')' '{' case_stmts default_stmt '}'
   39 case_stmt: "case" pnum NUM switch_compare save ':' statement_list •  ['}', "case", "default"]
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • pid ID '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 31
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47

    NUM       reduce using rule 65 (pnum)
    ID        reduce using rule 64 (pid)
    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 48
    statement            go to state 49
    expression_stmt      go to state 50
    selection_stmt       go to state 51
    iteration_stmt       go to state 52
    return_stmt          go to state 53
    switch_stmt          go to state 54
    expression           go to state 55
    var                  go to state 56
    simple_expression    go to state 57
    additive_expression  go to state 58
    term                 go to state 59
    factor               go to state 60
    call                 go to state 61
    pid                  go to state 62
    pnum                 go to state 63
