Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier ID ';'
    7                | type_specifier ID '[' pnum NUM ']' ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier ID '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier ID
   16      | type_specifier ID '[' ']'

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | ε

   20 statement_list: statement_list statement
   21               | ε

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression ';'
   29                | "break" ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression ')' save statement "endif"
   32               | "if" '(' expression ')' save statement "else" jpf_save statement "endif"

   33 iteration_stmt: "while" label '(' expression ')' save statement

   34 return_stmt: "return" ';'
   35            | "return" expression ';'

   36 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | ε

   39 case_stmt: "case" pnum NUM switch_compare save ':' statement_list

   40 default_stmt: "default" ':' statement_list
   41             | ε

   42 expression: var '=' expression
   43           | simple_expression

   44 var: pid ID
   45    | pid ID '[' expression ']'

   46 simple_expression: additive_expression '<' additive_expression
   47                  | additive_expression
   48                  | additive_expression "==" additive_expression

   49 additive_expression: additive_expression '+' term
   50                    | term
   51                    | additive_expression '-' term

   52 term: term '*' factor
   53     | factor
   54     | term '/' factor

   55 factor: '(' expression ')'
   56       | var
   57       | call
   58       | pnum NUM

   59 call: "output" '(' args ')'

   60 args: arg_list
   61     | ε

   62 arg_list: arg_list ',' expression
   63         | expression

   64 pid: ε

   65 pnum: ε

   66 jpf_save: ε

   67 label: ε

   68 jp_forward: ε

   69 switch_compare: ε

   70 save: ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 31 32 33 36 55 59
    ')' (41) 10 31 32 33 36 55 59
    '*' (42) 52
    '+' (43) 49
    ',' (44) 13 62
    '-' (45) 51
    '/' (47) 54
    ':' (58) 39 40
    ';' (59) 6 7 28 29 30 34 35
    '<' (60) 46
    '=' (61) 42
    '[' (91) 7 16 45
    ']' (93) 7 16 45
    '{' (123) 17 36
    '}' (125) 17 36
    error (256)
    NUM (258) 7 39 58
    ID (259) 6 7 10 15 16 44 45
    "int" (260) 8
    "void" (261) 9 12
    "break" (262) 29
    "if" (263) 31 32
    "endif" (264) 31 32
    "else" (265) 32
    "while" (266) 33
    "return" (267) 34 35
    "switch" (268) 36
    "case" (269) 39
    "default" (270) 40
    "==" (271) 48
    "output" (272) 59


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program (34)
        on left: 1
        on right: 0
    declaration_list (35)
        on left: 2 3
        on right: 1 2
    declaration (36)
        on left: 4 5
        on right: 2 3
    var_declaration (37)
        on left: 6 7
        on right: 4 18
    type_specifier (38)
        on left: 8 9
        on right: 6 7 10 15 16
    fun_declaration (39)
        on left: 10
        on right: 5
    params (40)
        on left: 11 12
        on right: 10
    param_list (41)
        on left: 13 14
        on right: 11 13
    param (42)
        on left: 15 16
        on right: 13 14
    compound_stmt (43)
        on left: 17
        on right: 10 23
    local_declarations (44)
        on left: 18 19
        on right: 17 18
    statement_list (45)
        on left: 20 21
        on right: 17 20 39 40
    statement (46)
        on left: 22 23 24 25 26 27
        on right: 20 31 32 33
    expression_stmt (47)
        on left: 28 29 30
        on right: 22
    selection_stmt (48)
        on left: 31 32
        on right: 24
    iteration_stmt (49)
        on left: 33
        on right: 25
    return_stmt (50)
        on left: 34 35
        on right: 26
    switch_stmt (51)
        on left: 36
        on right: 27
    case_stmts (52)
        on left: 37 38
        on right: 36 37
    case_stmt (53)
        on left: 39
        on right: 37
    default_stmt (54)
        on left: 40 41
        on right: 36
    expression (55)
        on left: 42 43
        on right: 28 31 32 33 35 36 42 45 55 62 63
    var (56)
        on left: 44 45
        on right: 42 56
    simple_expression (57)
        on left: 46 47 48
        on right: 43
    additive_expression (58)
        on left: 49 50 51
        on right: 46 47 48 49 51
    term (59)
        on left: 52 53 54
        on right: 49 50 51 52 54
    factor (60)
        on left: 55 56 57 58
        on right: 52 53 54
    call (61)
        on left: 59
        on right: 57
    args (62)
        on left: 60 61
        on right: 59
    arg_list (63)
        on left: 62 63
        on right: 60 62
    pid (64)
        on left: 64
        on right: 44 45
    pnum (65)
        on left: 65
        on right: 7 39 58
    jpf_save (66)
        on left: 66
        on right: 32
    label (67)
        on left: 67
        on right: 33
    jp_forward (68)
        on left: 68
        on right: 36
    switch_compare (69)
        on left: 69
        on right: 39
    save (70)
        on left: 70
        on right: 31 32 33 36 39


State 0

    0 $accept: • program $end
    1 program: • declaration_list
    2 declaration_list: • declaration_list declaration
    3                 | • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';'
    7                | • type_specifier ID '[' pnum NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


State 1

    8 type_specifier: "int" •

    $default  reduce using rule 8 (type_specifier)


State 2

    9 type_specifier: "void" •

    $default  reduce using rule 9 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •  [$end]
    2 declaration_list: declaration_list • declaration
    4 declaration: • var_declaration
    5            | • fun_declaration
    6 var_declaration: • type_specifier ID ';'
    7                | • type_specifier ID '[' pnum NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: • type_specifier ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


State 5

    3 declaration_list: declaration •

    $default  reduce using rule 3 (declaration_list)


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var_declaration: type_specifier • ID ';'
    7                | type_specifier • ID '[' pnum NUM ']' ';'
   10 fun_declaration: type_specifier • ID '(' params ')' compound_stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration_list declaration •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier ID • ';'
    7                | type_specifier ID • '[' pnum NUM ']' ';'
   10 fun_declaration: type_specifier ID • '(' params ')' compound_stmt

    ';'  shift, and go to state 12
    '['  shift, and go to state 13
    '('  shift, and go to state 14


State 12

    6 var_declaration: type_specifier ID ';' •

    $default  reduce using rule 6 (var_declaration)


State 13

    7 var_declaration: type_specifier ID '[' • pnum NUM ']' ';'
   65 pnum: ε •

    $default  reduce using rule 65 (pnum)

    pnum  go to state 15


State 14

    8 type_specifier: • "int"
    9               | • "void"
   10 fun_declaration: type_specifier ID '(' • params ')' compound_stmt
   11 params: • param_list
   12       | • "void"
   13 param_list: • param_list ',' param
   14           | • param
   15 param: • type_specifier ID
   16      | • type_specifier ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 16

    type_specifier  go to state 17
    params          go to state 18
    param_list      go to state 19
    param           go to state 20


State 15

    7 var_declaration: type_specifier ID '[' pnum • NUM ']' ';'

    NUM  shift, and go to state 21


State 16

    9 type_specifier: "void" •  [ID]
   12 params: "void" •  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


State 17

   15 param: type_specifier • ID
   16      | type_specifier • ID '[' ']'

    ID  shift, and go to state 22


State 18

   10 fun_declaration: type_specifier ID '(' params • ')' compound_stmt

    ')'  shift, and go to state 23


State 19

   11 params: param_list •  [')']
   13 param_list: param_list • ',' param

    ','  shift, and go to state 24

    $default  reduce using rule 11 (params)


State 20

   14 param_list: param •

    $default  reduce using rule 14 (param_list)


State 21

    7 var_declaration: type_specifier ID '[' pnum NUM • ']' ';'

    ']'  shift, and go to state 25


State 22

   15 param: type_specifier ID •  [')', ',']
   16      | type_specifier ID • '[' ']'

    '['  shift, and go to state 26

    $default  reduce using rule 15 (param)


State 23

   10 fun_declaration: type_specifier ID '(' params ')' • compound_stmt
   17 compound_stmt: • '{' local_declarations statement_list '}'

    '{'  shift, and go to state 27

    compound_stmt  go to state 28


State 24

    8 type_specifier: • "int"
    9               | • "void"
   13 param_list: param_list ',' • param
   15 param: • type_specifier ID
   16      | • type_specifier ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 17
    param           go to state 29


State 25

    7 var_declaration: type_specifier ID '[' pnum NUM ']' • ';'

    ';'  shift, and go to state 30


State 26

   16 param: type_specifier ID '[' • ']'

    ']'  shift, and go to state 31


State 27

   17 compound_stmt: '{' • local_declarations statement_list '}'
   18 local_declarations: • local_declarations var_declaration
   19                   | ε •

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 32


State 28

   10 fun_declaration: type_specifier ID '(' params ')' compound_stmt •

    $default  reduce using rule 10 (fun_declaration)


State 29

   13 param_list: param_list ',' param •

    $default  reduce using rule 13 (param_list)


State 30

    7 var_declaration: type_specifier ID '[' pnum NUM ']' ';' •

    $default  reduce using rule 7 (var_declaration)


State 31

   16 param: type_specifier ID '[' ']' •

    $default  reduce using rule 16 (param)


State 32

    6 var_declaration: • type_specifier ID ';'
    7                | • type_specifier ID '[' pnum NUM ']' ';'
    8 type_specifier: • "int"
    9               | • "void"
   17 compound_stmt: '{' local_declarations • statement_list '}'
   18 local_declarations: local_declarations • var_declaration
   20 statement_list: • statement_list statement
   21               | ε •  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch", "output"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 33
    type_specifier   go to state 34
    statement_list   go to state 35


State 33

   18 local_declarations: local_declarations var_declaration •

    $default  reduce using rule 18 (local_declarations)


State 34

    6 var_declaration: type_specifier • ID ';'
    7                | type_specifier • ID '[' pnum NUM ']' ';'

    ID  shift, and go to state 36


State 35

   17 compound_stmt: • '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list • '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 37
    '('       shift, and go to state 38
    '{'       shift, and go to state 27
    '}'       shift, and go to state 39
    "break"   shift, and go to state 40
    "if"      shift, and go to state 41
    "while"   shift, and go to state 42
    "return"  shift, and go to state 43
    "switch"  shift, and go to state 44
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 46
    statement            go to state 47
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 36

    6 var_declaration: type_specifier ID • ';'
    7                | type_specifier ID • '[' pnum NUM ']' ';'

    ';'  shift, and go to state 12
    '['  shift, and go to state 13


State 37

   30 expression_stmt: ';' •

    $default  reduce using rule 30 (expression_stmt)


State 38

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   55       | '(' • expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 62
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 39

   17 compound_stmt: '{' local_declarations statement_list '}' •

    $default  reduce using rule 17 (compound_stmt)


State 40

   29 expression_stmt: "break" • ';'

    ';'  shift, and go to state 63


State 41

   31 selection_stmt: "if" • '(' expression ')' save statement "endif"
   32               | "if" • '(' expression ')' save statement "else" jpf_save statement "endif"

    '('  shift, and go to state 64


State 42

   33 iteration_stmt: "while" • label '(' expression ')' save statement
   67 label: ε •

    $default  reduce using rule 67 (label)

    label  go to state 65


State 43

   34 return_stmt: "return" • ';'
   35            | "return" • expression ';'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 66
    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 67
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 44

   36 switch_stmt: "switch" • jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   68 jp_forward: ε •

    $default  reduce using rule 68 (jp_forward)

    jp_forward  go to state 68


State 45

   59 call: "output" • '(' args ')'

    '('  shift, and go to state 69


State 46

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 47

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 48

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 49

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 50

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 51

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 52

   27 statement: switch_stmt •

    $default  reduce using rule 27 (statement)


State 53

   28 expression_stmt: expression • ';'

    ';'  shift, and go to state 70


State 54

   42 expression: var • '=' expression
   56 factor: var •  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 71

    $default  reduce using rule 56 (factor)


State 55

   43 expression: simple_expression •

    $default  reduce using rule 43 (expression)


State 56

   46 simple_expression: additive_expression • '<' additive_expression
   47                  | additive_expression •  [';', ']', ')', ',']
   48                  | additive_expression • "==" additive_expression
   49 additive_expression: additive_expression • '+' term
   51                    | additive_expression • '-' term

    '<'   shift, and go to state 72
    "=="  shift, and go to state 73
    '+'   shift, and go to state 74
    '-'   shift, and go to state 75

    $default  reduce using rule 47 (simple_expression)


State 57

   50 additive_expression: term •  [';', ']', ')', ',', '<', "==", '+', '-']
   52 term: term • '*' factor
   54     | term • '/' factor

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77

    $default  reduce using rule 50 (additive_expression)


State 58

   53 term: factor •

    $default  reduce using rule 53 (term)


State 59

   57 factor: call •

    $default  reduce using rule 57 (factor)


State 60

   44 var: pid • ID
   45    | pid • ID '[' expression ']'

    ID  shift, and go to state 78


State 61

   58 factor: pnum • NUM

    NUM  shift, and go to state 79


State 62

   55 factor: '(' expression • ')'

    ')'  shift, and go to state 80


State 63

   29 expression_stmt: "break" ';' •

    $default  reduce using rule 29 (expression_stmt)


State 64

   31 selection_stmt: "if" '(' • expression ')' save statement "endif"
   32               | "if" '(' • expression ')' save statement "else" jpf_save statement "endif"
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 81
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 65

   33 iteration_stmt: "while" label • '(' expression ')' save statement

    '('  shift, and go to state 82


State 66

   34 return_stmt: "return" ';' •

    $default  reduce using rule 34 (return_stmt)


State 67

   35 return_stmt: "return" expression • ';'

    ';'  shift, and go to state 83


State 68

   36 switch_stmt: "switch" jp_forward • save '(' expression ')' '{' case_stmts default_stmt '}'
   70 save: ε •

    $default  reduce using rule 70 (save)

    save  go to state 84


State 69

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   59     | "output" '(' • args ')'
   60 args: • arg_list
   61     | ε •  [')']
   62 arg_list: • arg_list ',' expression
   63         | • expression
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    ID        reduce using rule 64 (pid)
    $default  reduce using rule 61 (args)

    expression           go to state 85
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    args                 go to state 86
    arg_list             go to state 87
    pid                  go to state 60
    pnum                 go to state 61


State 70

   28 expression_stmt: expression ';' •

    $default  reduce using rule 28 (expression_stmt)


State 71

   42 expression: • var '=' expression
   42           | var '=' • expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 88
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 72

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: additive_expression '<' • additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var                  go to state 89
    additive_expression  go to state 90
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 73

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   48 simple_expression: additive_expression "==" • additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var                  go to state 89
    additive_expression  go to state 91
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 74

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   49 additive_expression: additive_expression '+' • term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 89
    term    go to state 92
    factor  go to state 58
    call    go to state 59
    pid     go to state 60
    pnum    go to state 61


State 75

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   51 additive_expression: additive_expression '-' • term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 89
    term    go to state 93
    factor  go to state 58
    call    go to state 59
    pid     go to state 60
    pnum    go to state 61


State 76

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   52 term: term '*' • factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 89
    factor  go to state 94
    call    go to state 59
    pid     go to state 60
    pnum    go to state 61


State 77

   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   54 term: term '/' • factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    var     go to state 89
    factor  go to state 95
    call    go to state 59
    pid     go to state 60
    pnum    go to state 61


State 78

   44 var: pid ID •  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   45    | pid ID • '[' expression ']'

    '['  shift, and go to state 96

    $default  reduce using rule 44 (var)


State 79

   58 factor: pnum NUM •

    $default  reduce using rule 58 (factor)


State 80

   55 factor: '(' expression ')' •

    $default  reduce using rule 55 (factor)


State 81

   31 selection_stmt: "if" '(' expression • ')' save statement "endif"
   32               | "if" '(' expression • ')' save statement "else" jpf_save statement "endif"

    ')'  shift, and go to state 97


State 82

   33 iteration_stmt: "while" label '(' • expression ')' save statement
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 98
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 83

   35 return_stmt: "return" expression ';' •

    $default  reduce using rule 35 (return_stmt)


State 84

   36 switch_stmt: "switch" jp_forward save • '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 99


State 85

   63 arg_list: expression •

    $default  reduce using rule 63 (arg_list)


State 86

   59 call: "output" '(' args • ')'

    ')'  shift, and go to state 100


State 87

   60 args: arg_list •  [')']
   62 arg_list: arg_list • ',' expression

    ','  shift, and go to state 101

    $default  reduce using rule 60 (args)


State 88

   42 expression: var '=' expression •

    $default  reduce using rule 42 (expression)


State 89

   56 factor: var •

    $default  reduce using rule 56 (factor)


State 90

   46 simple_expression: additive_expression '<' additive_expression •  [';', ']', ')', ',']
   49 additive_expression: additive_expression • '+' term
   51                    | additive_expression • '-' term

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75

    $default  reduce using rule 46 (simple_expression)


State 91

   48 simple_expression: additive_expression "==" additive_expression •  [';', ']', ')', ',']
   49 additive_expression: additive_expression • '+' term
   51                    | additive_expression • '-' term

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75

    $default  reduce using rule 48 (simple_expression)


State 92

   49 additive_expression: additive_expression '+' term •  [';', ']', ')', ',', '<', "==", '+', '-']
   52 term: term • '*' factor
   54     | term • '/' factor

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77

    $default  reduce using rule 49 (additive_expression)


State 93

   51 additive_expression: additive_expression '-' term •  [';', ']', ')', ',', '<', "==", '+', '-']
   52 term: term • '*' factor
   54     | term • '/' factor

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77

    $default  reduce using rule 51 (additive_expression)


State 94

   52 term: term '*' factor •

    $default  reduce using rule 52 (term)


State 95

   54 term: term '/' factor •

    $default  reduce using rule 54 (term)


State 96

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   45    | pid ID '[' • expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 102
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 97

   31 selection_stmt: "if" '(' expression ')' • save statement "endif"
   32               | "if" '(' expression ')' • save statement "else" jpf_save statement "endif"
   70 save: ε •

    $default  reduce using rule 70 (save)

    save  go to state 103


State 98

   33 iteration_stmt: "while" label '(' expression • ')' save statement

    ')'  shift, and go to state 104


State 99

   36 switch_stmt: "switch" jp_forward save '(' • expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 105
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 100

   59 call: "output" '(' args ')' •

    $default  reduce using rule 59 (call)


State 101

   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   62 arg_list: arg_list ',' • expression
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    '('       shift, and go to state 38
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    expression           go to state 106
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 102

   45 var: pid ID '[' expression • ']'

    ']'  shift, and go to state 107


State 103

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   31               | "if" '(' expression ')' save • statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   32               | "if" '(' expression ')' save • statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 37
    '('       shift, and go to state 38
    '{'       shift, and go to state 27
    "break"   shift, and go to state 40
    "if"      shift, and go to state 41
    "while"   shift, and go to state 42
    "return"  shift, and go to state 43
    "switch"  shift, and go to state 44
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 46
    statement            go to state 108
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 104

   33 iteration_stmt: "while" label '(' expression ')' • save statement
   70 save: ε •

    $default  reduce using rule 70 (save)

    save  go to state 109


State 105

   36 switch_stmt: "switch" jp_forward save '(' expression • ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 110


State 106

   62 arg_list: arg_list ',' expression •

    $default  reduce using rule 62 (arg_list)


State 107

   45 var: pid ID '[' expression ']' •

    $default  reduce using rule 45 (var)


State 108

   31 selection_stmt: "if" '(' expression ')' save statement • "endif"
   32               | "if" '(' expression ')' save statement • "else" jpf_save statement "endif"

    "endif"  shift, and go to state 111
    "else"   shift, and go to state 112


State 109

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression ')' save statement
   33               | "while" label '(' expression ')' save • statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 37
    '('       shift, and go to state 38
    '{'       shift, and go to state 27
    "break"   shift, and go to state 40
    "if"      shift, and go to state 41
    "while"   shift, and go to state 42
    "return"  shift, and go to state 43
    "switch"  shift, and go to state 44
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 46
    statement            go to state 113
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 110

   36 switch_stmt: "switch" jp_forward save '(' expression ')' • '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 114


State 111

   31 selection_stmt: "if" '(' expression ')' save statement "endif" •

    $default  reduce using rule 31 (selection_stmt)


State 112

   32 selection_stmt: "if" '(' expression ')' save statement "else" • jpf_save statement "endif"
   66 jpf_save: ε •

    $default  reduce using rule 66 (jpf_save)

    jpf_save  go to state 115


State 113

   33 iteration_stmt: "while" label '(' expression ')' save statement •

    $default  reduce using rule 33 (iteration_stmt)


State 114

   36 switch_stmt: "switch" jp_forward save '(' expression ')' '{' • case_stmts default_stmt '}'
   37 case_stmts: • case_stmts case_stmt
   38           | ε •

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 116


State 115

   17 compound_stmt: • '{' local_declarations statement_list '}'
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   32               | "if" '(' expression ')' save statement "else" jpf_save • statement "endif"
   33 iteration_stmt: • "while" label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 37
    '('       shift, and go to state 38
    '{'       shift, and go to state 27
    "break"   shift, and go to state 40
    "if"      shift, and go to state 41
    "while"   shift, and go to state 42
    "return"  shift, and go to state 43
    "switch"  shift, and go to state 44
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    $default  reduce using rule 64 (pid)

    compound_stmt        go to state 46
    statement            go to state 117
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 116

   36 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts • default_stmt '}'
   37 case_stmts: case_stmts • case_stmt
   39 case_stmt: • "case" pnum NUM switch_compare save ':' statement_list
   40 default_stmt: • "default" ':' statement_list
   41             | ε •  ['}']

    "case"     shift, and go to state 118
    "default"  shift, and go to state 119

    $default  reduce using rule 41 (default_stmt)

    case_stmt     go to state 120
    default_stmt  go to state 121


State 117

   32 selection_stmt: "if" '(' expression ')' save statement "else" jpf_save statement • "endif"

    "endif"  shift, and go to state 122


State 118

   39 case_stmt: "case" • pnum NUM switch_compare save ':' statement_list
   65 pnum: ε •

    $default  reduce using rule 65 (pnum)

    pnum  go to state 123


State 119

   40 default_stmt: "default" • ':' statement_list

    ':'  shift, and go to state 124


State 120

   37 case_stmts: case_stmts case_stmt •

    $default  reduce using rule 37 (case_stmts)


State 121

   36 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt • '}'

    '}'  shift, and go to state 125


State 122

   32 selection_stmt: "if" '(' expression ')' save statement "else" jpf_save statement "endif" •

    $default  reduce using rule 32 (selection_stmt)


State 123

   39 case_stmt: "case" pnum • NUM switch_compare save ':' statement_list

    NUM  shift, and go to state 126


State 124

   20 statement_list: • statement_list statement
   21               | ε •
   40 default_stmt: "default" ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 127


State 125

   36 switch_stmt: "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}' •

    $default  reduce using rule 36 (switch_stmt)


State 126

   39 case_stmt: "case" pnum NUM • switch_compare save ':' statement_list
   69 switch_compare: ε •

    $default  reduce using rule 69 (switch_compare)

    switch_compare  go to state 128


State 127

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   40 default_stmt: "default" ':' statement_list •  ['}']
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 37
    '('       shift, and go to state 38
    '{'       shift, and go to state 27
    "break"   shift, and go to state 40
    "if"      shift, and go to state 41
    "while"   shift, and go to state 42
    "return"  shift, and go to state 43
    "switch"  shift, and go to state 44
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    ID        reduce using rule 64 (pid)
    $default  reduce using rule 40 (default_stmt)

    compound_stmt        go to state 46
    statement            go to state 47
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61


State 128

   39 case_stmt: "case" pnum NUM switch_compare • save ':' statement_list
   70 save: ε •

    $default  reduce using rule 70 (save)

    save  go to state 129


State 129

   39 case_stmt: "case" pnum NUM switch_compare save • ':' statement_list

    ':'  shift, and go to state 130


State 130

   20 statement_list: • statement_list statement
   21               | ε •
   39 case_stmt: "case" pnum NUM switch_compare save ':' • statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 131


State 131

   17 compound_stmt: • '{' local_declarations statement_list '}'
   20 statement_list: statement_list • statement
   22 statement: • expression_stmt
   23          | • compound_stmt
   24          | • selection_stmt
   25          | • iteration_stmt
   26          | • return_stmt
   27          | • switch_stmt
   28 expression_stmt: • expression ';'
   29                | • "break" ';'
   30                | • ';'
   31 selection_stmt: • "if" '(' expression ')' save statement "endif"
   32               | • "if" '(' expression ')' save statement "else" jpf_save statement "endif"
   33 iteration_stmt: • "while" label '(' expression ')' save statement
   34 return_stmt: • "return" ';'
   35            | • "return" expression ';'
   36 switch_stmt: • "switch" jp_forward save '(' expression ')' '{' case_stmts default_stmt '}'
   39 case_stmt: "case" pnum NUM switch_compare save ':' statement_list •  ['}', "case", "default"]
   42 expression: • var '=' expression
   43           | • simple_expression
   44 var: • pid ID
   45    | • pid ID '[' expression ']'
   46 simple_expression: • additive_expression '<' additive_expression
   47                  | • additive_expression
   48                  | • additive_expression "==" additive_expression
   49 additive_expression: • additive_expression '+' term
   50                    | • term
   51                    | • additive_expression '-' term
   52 term: • term '*' factor
   53     | • factor
   54     | • term '/' factor
   55 factor: • '(' expression ')'
   56       | • var
   57       | • call
   58       | • pnum NUM
   59 call: • "output" '(' args ')'
   64 pid: ε •  [ID]
   65 pnum: ε •  [NUM]

    ';'       shift, and go to state 37
    '('       shift, and go to state 38
    '{'       shift, and go to state 27
    "break"   shift, and go to state 40
    "if"      shift, and go to state 41
    "while"   shift, and go to state 42
    "return"  shift, and go to state 43
    "switch"  shift, and go to state 44
    "output"  shift, and go to state 45

    NUM       reduce using rule 65 (pnum)
    ID        reduce using rule 64 (pid)
    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 46
    statement            go to state 47
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    pid                  go to state 60
    pnum                 go to state 61
