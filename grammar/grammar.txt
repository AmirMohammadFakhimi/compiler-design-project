1. program -> declaration_list
2. declaration_list -> declaration_list declaration | declaration
3. declaration -> var_declaration | fun_declaration
4. var_declaration -> type_specifier #pid ID ; | type_specifier #pid ID [ #pnum NUM ] #get_value ;
5. type_specifier -> int | void
6. fun_declaration -> type_specifier #pid ID ( params ) compound_stmt
7. params -> param_list | void
8. param_list -> param_list , param | param
9. param -> type_specifier #pid ID | type_specifier #pid ID [ ]
10. compound_stmt -> { local_declarations statement_list }
11. local_declarations -> local_declarations var_declaration | Epsilon
12. statement_list -> statement_list statement | Epsilon
13. statement -> expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt | switch_stmt
14. expression_stmt -> expression ; | break ; | ;
15. selection_stmt -> if ( expression ) #save statement #jpf endif | if ( expression ) #save statement else #jpf_save statement #jp endif
16. iteration_stmt -> while #label ( expression ) #save statement #while
17. return_stmt -> return ; | return expression ;

18. switch_stmt -> switch #save_gettemp ( expression ) { case_stmts default_stmt #jp_switch}
19. case_stmts -> case_stmts case_stmt | Epsilon
20. case_stmt -> case #pnum NUM #switch_compare #save : statement_list #jp_jpf_switch
21. default_stmt -> default : statement_list | Epsilon

22. expression -> var = expression #assign | simple_expression 
23. var -> #pid ID | #pid ID [ expression ]
24. simple_expression -> additive_expression < additive_expression #lt | additive_expression |  additive_expression == additive_expression #equal

26. additive_expression -> additive_expression + term #add | term | additive_expression - term #minus
28. term -> term * factor | factor #mul | term / factor #div
30. factor -> ( expression ) | var | call | #pnum NUM

31. call -> #pid ID ( args )
32. args -> arg_list | Epsilon
33. arg_list -> arg_list , expression | expression

#pid
#pnum
#assign
#add
#minus
#mul
#div
#equal
#lt
#save
#jpf
#jpf_save
#jp
#label
#while  
#switch_compare -> assign temp 0 , (eq,expression,num,temp) , save for jpf --> stack: (temp,save)
    for example:
    4	(ASSIGN, 0, 512,   )
    5	(EQ, 508, #1, 512 )
    6	(JPF, 512, 8,   )


Keywords: else if int return void while switch case default break endif

Special symbols: + - * / < == = : ; , ( ) [ ] { } /* */ //

ID = letter letter*
NUM = digit digit*
letter = a | .. | z | A | .. | Z
digit = 0 | .. | 9

Comments: /* ... */

